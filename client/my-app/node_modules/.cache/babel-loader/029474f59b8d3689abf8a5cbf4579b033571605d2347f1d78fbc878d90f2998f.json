{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ayush\\\\Downloads\\\\Socket Demo App\\\\Socket Demo App\\\\client\\\\my-app\\\\src\\\\assets\\\\one.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\n// import './App.css';\n\n// Define the board layout\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst BOARD_SIZE = 10;\nconst BOARD = Array(BOARD_SIZE * BOARD_SIZE).fill(null);\nconst SNAKES = {\n  16: 6,\n  46: 25,\n  49: 11,\n  62: 19,\n  64: 60,\n  74: 53,\n  89: 68,\n  92: 88,\n  95: 75,\n  99: 80\n};\nconst LADDERS = {\n  2: 38,\n  7: 14,\n  8: 31,\n  15: 26,\n  21: 42,\n  28: 84,\n  36: 44,\n  51: 67,\n  71: 91,\n  78: 98,\n  87: 94\n};\nfunction App() {\n  _s();\n  const [position, setPosition] = useState(0);\n  const [message, setMessage] = useState('');\n\n  // Roll the dice and move the player\n  const rollDice = () => {\n    const dice = Math.floor(Math.random() * 6) + 1;\n    const newPosition = position + dice;\n    if (newPosition >= BOARD_SIZE * BOARD_SIZE) {\n      setMessage('You won!');\n      setPosition(0);\n    } else if (SNAKES[newPosition]) {\n      setMessage(`You landed on a snake! Move back to ${SNAKES[newPosition]}`);\n      setPosition(SNAKES[newPosition]);\n    } else if (LADDERS[newPosition]) {\n      setMessage(`You landed on a ladder! Move up to ${LADDERS[newPosition]}`);\n      setPosition(LADDERS[newPosition]);\n    } else {\n      setMessage(`You rolled a ${dice}. Move to ${newPosition}`);\n      setPosition(newPosition);\n    }\n  };\n\n  // Render the board and the player\n  const renderBoard = () => {\n    return BOARD.map((cell, index) => {\n      const x = index % BOARD_SIZE;\n      const y = Math.floor(index / BOARD_SIZE);\n      const cellNumber = BOARD_SIZE * (BOARD_SIZE - y - 1) + (y % 2 === 0 ? x : BOARD_SIZE - x - 1) + 1;\n      const isActive = position === cellNumber;\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `cell ${isActive ? 'active' : ''}`,\n        children: cellNumber\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Snake and Ladder Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: renderBoard()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: rollDice,\n      children: \"Roll the Dice\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Lio+7vRvCStuNA/xhhtPyGk7tkQ=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","BOARD_SIZE","BOARD","Array","fill","SNAKES","LADDERS","App","position","setPosition","message","setMessage","rollDice","dice","Math","floor","random","newPosition","renderBoard","map","cell","index","x","y","cellNumber","isActive"],"sources":["C:/Users/ayush/Downloads/Socket Demo App/Socket Demo App/client/my-app/src/assets/one.js"],"sourcesContent":["import React, { useState } from 'react';\r\n// import './App.css';\r\n\r\n// Define the board layout\r\nconst BOARD_SIZE = 10;\r\nconst BOARD = Array(BOARD_SIZE * BOARD_SIZE).fill(null);\r\nconst SNAKES = { 16: 6, 46: 25, 49: 11, 62: 19, 64: 60, 74: 53, 89: 68, 92: 88, 95: 75, 99: 80 };\r\nconst LADDERS = { 2: 38, 7: 14, 8: 31, 15: 26, 21: 42, 28: 84, 36: 44, 51: 67, 71: 91, 78: 98, 87: 94 };\r\n\r\nfunction App() {\r\n  const [position, setPosition] = useState(0);\r\n  const [message, setMessage] = useState('');\r\n\r\n  // Roll the dice and move the player\r\n  const rollDice = () => {\r\n    const dice = Math.floor(Math.random() * 6) + 1;\r\n    const newPosition = position + dice;\r\n\r\n    if (newPosition >= BOARD_SIZE * BOARD_SIZE) {\r\n      setMessage('You won!');\r\n      setPosition(0);\r\n    } else if (SNAKES[newPosition]) {\r\n      setMessage(`You landed on a snake! Move back to ${SNAKES[newPosition]}`);\r\n      setPosition(SNAKES[newPosition]);\r\n    } else if (LADDERS[newPosition]) {\r\n      setMessage(`You landed on a ladder! Move up to ${LADDERS[newPosition]}`);\r\n      setPosition(LADDERS[newPosition]);\r\n    } else {\r\n      setMessage(`You rolled a ${dice}. Move to ${newPosition}`);\r\n      setPosition(newPosition);\r\n    }\r\n  };\r\n\r\n  // Render the board and the player\r\n  const renderBoard = () => {\r\n    return BOARD.map((cell, index) => {\r\n      const x = index % BOARD_SIZE;\r\n      const y = Math.floor(index / BOARD_SIZE);\r\n      const cellNumber = BOARD_SIZE * (BOARD_SIZE - y - 1) + (y % 2 === 0 ? x : BOARD_SIZE - x - 1) + 1;\r\n      const isActive = position === cellNumber;\r\n\r\n      return (\r\n        <div key={index} className={`cell ${isActive ? 'active' : ''}`}>\r\n          {cellNumber}\r\n        </div>\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Snake and Ladder Game</h1>\r\n      <div className=\"board\">{renderBoard()}</div>\r\n      <button onClick={rollDice}>Roll the Dice</button>\r\n      <p>{message}</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}