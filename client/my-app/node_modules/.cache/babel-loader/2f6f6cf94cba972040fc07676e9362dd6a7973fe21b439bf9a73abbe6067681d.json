{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ayush\\\\Downloads\\\\Socket Demo App\\\\Socket Demo App\\\\client\\\\my-app\\\\src\\\\assets\\\\snake.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./snake.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [playerPosition, setPlayerPosition] = useState(0);\n  const [computerPosition, setComputerPosition] = useState(0);\n  const [message, setMessage] = useState(\"Roll the dice to start the game!\");\n  const rollDice = () => {\n    const playerRoll = Math.floor(Math.random() * 6) + 1;\n    const computerRoll = Math.floor(Math.random() * 6) + 1;\n    const playerNewPosition = playerPosition + playerRoll;\n    const computerNewPosition = computerPosition + computerRoll;\n\n    // Check if player has won\n    if (playerNewPosition >= 100) {\n      setMessage(\"Congratulations, you have won the game!\");\n      setPlayerPosition(100);\n      return;\n    }\n\n    // Check if computer has won\n    if (computerNewPosition >= 100) {\n      setMessage(\"Sorry, computer has won the game. Better luck next time!\");\n      setComputerPosition(100);\n      return;\n    }\n\n    // Check if player has landed on a ladder or snake\n    const playerLadder = checkLadder(playerNewPosition);\n    const playerSnake = checkSnake(playerNewPosition);\n    if (playerLadder) {\n      setMessage(`You landed on a ladder and moved from ${playerPosition} to ${playerLadder.end}.`);\n      setPlayerPosition(playerLadder.end);\n    } else if (playerSnake) {\n      setMessage(`You landed on a snake and moved from ${playerPosition} to ${playerSnake.end}.`);\n      setPlayerPosition(playerSnake.end);\n    } else {\n      setMessage(`You rolled a ${playerRoll}. Your new position is ${playerNewPosition}.`);\n      setPlayerPosition(playerNewPosition);\n    }\n\n    // Computer's turn\n    const computerLadder = checkLadder(computerNewPosition);\n    const computerSnake = checkSnake(computerNewPosition);\n    if (computerLadder) {\n      setMessage(`Computer landed on a ladder and moved from ${computerPosition} to ${computerLadder.end}.`);\n      setComputerPosition(computerLadder.end);\n    } else if (computerSnake) {\n      setMessage(`Computer landed on a snake and moved from ${computerPosition} to ${computerSnake.end}.`);\n      setComputerPosition(computerSnake.end);\n    } else {\n      setMessage(`Computer rolled a ${computerRoll}. Computer's new position is ${computerNewPosition}.`);\n      setComputerPosition(computerNewPosition);\n    }\n  };\n  const checkLadder = position => {\n    return ladderList.find(ladder => ladder.start === position);\n  };\n  const checkSnake = position => {\n    return snakeList.find(snake => snake.start === position);\n  };\n  const renderBoard = () => {\n    const cells = [];\n    for (let i = 0; i < 100; i++) {\n      const cellNumber = i + 1;\n      const isActive = playerPosition === cellNumber || computerPosition === cellNumber;\n      cells.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `cell ${isActive ? \"active\" : \"\"}`,\n        children: cellNumber\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this));\n    }\n    return cells;\n  };\n  const ladderList = [{\n    start: 6,\n    end: 27\n  }, {\n    start: 12,\n    end: 34\n  }, {\n    start: 22,\n    end: 38\n  }, {\n    start: 41,\n    end: 70\n  }, {\n    start: 51,\n    end: 67\n  }, {\n    start: 71,\n    end: 91\n  }, {\n    start: 85,\n    end: 99\n  }];\n  const snakeList = [{\n    start: 16,\n    end: 6\n  }, {\n    start: 46,\n    end: 25\n  }, {\n    start: 49,\n    end: 11\n  }, {\n    start: 62,\n    end: 19\n  }, {\n    start: 64,\n    end: 60\n  }, {\n    start: 74,\n    end: 53\n  }, {\n    start: 89,\n    end: 68\n  }, {\n    start: 92,\n    end: 88\n  }, {\n    start: 95,\n    end: 75\n  }, {\n    start: 98,\n    end: 78\n  }];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Snake and Ladder\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: renderBoard()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: rollDice,\n        children: \"Roll Dice\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"+jDaVJZNwSOfZ5PEU7PsBhRHbA8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","App","playerPosition","setPlayerPosition","computerPosition","setComputerPosition","message","setMessage","rollDice","playerRoll","Math","floor","random","computerRoll","playerNewPosition","computerNewPosition","playerLadder","checkLadder","playerSnake","checkSnake","end","computerLadder","computerSnake","position","ladderList","find","ladder","start","snakeList","snake","renderBoard","cells","i","cellNumber","isActive","push"],"sources":["C:/Users/ayush/Downloads/Socket Demo App/Socket Demo App/client/my-app/src/assets/snake.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./snake.css\";\r\nfunction App() {\r\n  const [playerPosition, setPlayerPosition] = useState(0);\r\n  const [computerPosition, setComputerPosition] = useState(0);\r\n  const [message, setMessage] = useState(\"Roll the dice to start the game!\");\r\n\r\n  const rollDice = () => {\r\n    const playerRoll = Math.floor(Math.random() * 6) + 1;\r\n    const computerRoll = Math.floor(Math.random() * 6) + 1;\r\n\r\n    const playerNewPosition = playerPosition + playerRoll;\r\n    const computerNewPosition = computerPosition + computerRoll;\r\n\r\n    // Check if player has won\r\n    if (playerNewPosition >= 100) {\r\n      setMessage(\"Congratulations, you have won the game!\");\r\n      setPlayerPosition(100);\r\n      return;\r\n    }\r\n\r\n    // Check if computer has won\r\n    if (computerNewPosition >= 100) {\r\n      setMessage(\"Sorry, computer has won the game. Better luck next time!\");\r\n      setComputerPosition(100);\r\n      return;\r\n    }\r\n\r\n    // Check if player has landed on a ladder or snake\r\n    const playerLadder = checkLadder(playerNewPosition);\r\n    const playerSnake = checkSnake(playerNewPosition);\r\n\r\n    if (playerLadder) {\r\n      setMessage(\r\n        `You landed on a ladder and moved from ${playerPosition} to ${playerLadder.end}.`\r\n      );\r\n      setPlayerPosition(playerLadder.end);\r\n    } else if (playerSnake) {\r\n      setMessage(\r\n        `You landed on a snake and moved from ${playerPosition} to ${playerSnake.end}.`\r\n      );\r\n      setPlayerPosition(playerSnake.end);\r\n    } else {\r\n      setMessage(\r\n        `You rolled a ${playerRoll}. Your new position is ${playerNewPosition}.`\r\n      );\r\n      setPlayerPosition(playerNewPosition);\r\n    }\r\n\r\n    // Computer's turn\r\n    const computerLadder = checkLadder(computerNewPosition);\r\n    const computerSnake = checkSnake(computerNewPosition);\r\n\r\n    if (computerLadder) {\r\n      setMessage(\r\n        `Computer landed on a ladder and moved from ${computerPosition} to ${computerLadder.end}.`\r\n      );\r\n      setComputerPosition(computerLadder.end);\r\n    } else if (computerSnake) {\r\n      setMessage(\r\n        `Computer landed on a snake and moved from ${computerPosition} to ${computerSnake.end}.`\r\n      );\r\n      setComputerPosition(computerSnake.end);\r\n    } else {\r\n      setMessage(\r\n        `Computer rolled a ${computerRoll}. Computer's new position is ${computerNewPosition}.`\r\n      );\r\n      setComputerPosition(computerNewPosition);\r\n    }\r\n  };\r\n\r\n  const checkLadder = (position) => {\r\n    return ladderList.find((ladder) => ladder.start === position);\r\n  };\r\n\r\n  const checkSnake = (position) => {\r\n    return snakeList.find((snake) => snake.start === position);\r\n  };\r\n\r\n  const renderBoard = () => {\r\n    const cells = [];\r\n\r\n    for (let i = 0; i < 100; i++) {\r\n      const cellNumber = i + 1;\r\n      const isActive =\r\n        playerPosition === cellNumber || computerPosition === cellNumber;\r\n      cells.push(\r\n        <div key={i} className={`cell ${isActive ? \"active\" : \"\"}`}>\r\n          {cellNumber}\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return cells;\r\n  };\r\n\r\n  const ladderList = [\r\n    { start: 6, end: 27 },\r\n    { start: 12, end: 34 },\r\n    { start: 22, end: 38 },\r\n    { start: 41, end: 70 },\r\n    { start: 51, end: 67 },\r\n    { start: 71, end: 91 },\r\n    { start: 85, end: 99 },\r\n  ];\r\n\r\n  const snakeList = [\r\n    { start: 16, end: 6 },\r\n    { start: 46, end: 25 },\r\n    { start: 49, end: 11 },\r\n    { start: 62, end: 19 },\r\n    { start: 64, end: 60 },\r\n    { start: 74, end: 53 },\r\n    { start: 89, end: 68 },\r\n    { start: 92, end: 88 },\r\n    { start: 95, end: 75 },\r\n    { start: 98, end: 78 },\r\n  ];\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Snake and Ladder</h1>\r\n      <div className=\"board\">{renderBoard()}</div>\r\n      <div className=\"game-info\">\r\n        <p>{message}</p>\r\n        <button onClick={rollDice}>Roll Dice</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}