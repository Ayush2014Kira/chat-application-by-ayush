{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ayush\\\\Downloads\\\\Socket Demo App\\\\Socket Demo App\\\\client\\\\my-app\\\\src\\\\assets\\\\board.js\";\n// import React from 'react';\n// import './board.css';\n\n// const Board = ({ size, children }) => {\n// const renderCells = () => {\n// const cells = [];\n\n// for (let i = size; i >= 1; i--) {\n// cells.push(<div key={i} className={`cell cell-${i}`}>{i}</div>);\n// }\n// return cells;\n// };\n// return (\n//     <div className=\"board\">\n//       {renderCells()}\n//       {children}\n//     </div>\n//   );\n// };\n\n// const Board = ({ size, children }) => {\n//   const renderCells = () => {\n//     const cells = [];\n//     let row = [];\n\n//     for (let i = 1; i <= size; i++) {\n//       row.push(i);\n\n//       // If we've reached the end of a row, push it into the cells array and start a new row\n//       if (i % 10 === 0) {\n//         cells.push(row);\n//         row = [];\n//       }\n//     }\n\n//     return cells.map((row, rowIndex) => (\n//       <div key={rowIndex} className=\"row\">\n//         {row.map((cell, cellIndex) => (\n//           <div key={cellIndex} className={`cell cell-${cell}`}>{cell}</div>\n//         ))}\n//       </div>\n//     ));\n//   };\n\n//   return (\n//     <div className=\"board\">\n//       {renderCells()}\n//       {children}\n//     </div>\n//   );\n// };\n\n// export default Board;\nimport React from 'react';\nimport './board.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Board = _ref => {\n  let {\n    size,\n    children\n  } = _ref;\n  const renderCells = () => {\n    const cells = [];\n    let row = [];\n    for (let i = 1; i <= size; i++) {\n      row.push( /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `cell cell-${i}`,\n        children: i\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 16\n      }, this));\n      if (i % 10 === 0) {\n        cells.push( /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row\",\n          children: row\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 20\n        }, this));\n        row = [];\n      }\n    }\n    return cells.reverse();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [renderCells(), children]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","Board","size","children","renderCells","cells","row","i","push","reverse"],"sources":["C:/Users/ayush/Downloads/Socket Demo App/Socket Demo App/client/my-app/src/assets/board.js"],"sourcesContent":["// import React from 'react';\r\n// import './board.css';\r\n\r\n// const Board = ({ size, children }) => {\r\n// const renderCells = () => {\r\n// const cells = [];\r\n\r\n// for (let i = size; i >= 1; i--) {\r\n// cells.push(<div key={i} className={`cell cell-${i}`}>{i}</div>);\r\n// }\r\n// return cells;\r\n// };\r\n// return (\r\n//     <div className=\"board\">\r\n//       {renderCells()}\r\n//       {children}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n\r\n// const Board = ({ size, children }) => {\r\n//   const renderCells = () => {\r\n//     const cells = [];\r\n//     let row = [];\r\n\r\n//     for (let i = 1; i <= size; i++) {\r\n//       row.push(i);\r\n\r\n//       // If we've reached the end of a row, push it into the cells array and start a new row\r\n//       if (i % 10 === 0) {\r\n//         cells.push(row);\r\n//         row = [];\r\n//       }\r\n//     }\r\n\r\n//     return cells.map((row, rowIndex) => (\r\n//       <div key={rowIndex} className=\"row\">\r\n//         {row.map((cell, cellIndex) => (\r\n//           <div key={cellIndex} className={`cell cell-${cell}`}>{cell}</div>\r\n//         ))}\r\n//       </div>\r\n//     ));\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"board\">\r\n//       {renderCells()}\r\n//       {children}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Board;\r\nimport React from 'react';\r\nimport './board.css';\r\n\r\nconst Board = ({ size, children }) => {\r\n  const renderCells = () => {\r\n    const cells = [];\r\n    let row = [];\r\n\r\n    for (let i = 1; i <= size; i++) {\r\n      row.push(<div key={i} className={`cell cell-${i}`}>{i}</div>);\r\n      if (i % 10 === 0) {\r\n        cells.push(<div key={i} className=\"row\">{row}</div>);\r\n        row = [];\r\n      }\r\n    }\r\n\r\n    return cells.reverse();\r\n  };\r\n\r\n  return (\r\n    <div className=\"board\">\r\n      {renderCells()}\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n"],"mappings":";AAAA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,aAAa;AAAC;AAErB,MAAMC,KAAK,GAAG,QAAwB;EAAA,IAAvB;IAAEC,IAAI;IAAEC;EAAS,CAAC;EAC/B,MAAMC,WAAW,GAAG,MAAM;IACxB,MAAMC,KAAK,GAAG,EAAE;IAChB,IAAIC,GAAG,GAAG,EAAE;IAEZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAIL,IAAI,EAAEK,CAAC,EAAE,EAAE;MAC9BD,GAAG,CAACE,IAAI,eAAC;QAAa,SAAS,EAAG,aAAYD,CAAE,EAAE;QAAA,UAAEA;MAAC,GAAlCA,CAAC;QAAA;QAAA;QAAA;MAAA,QAAwC,CAAC;MAC7D,IAAIA,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE;QAChBF,KAAK,CAACG,IAAI,eAAC;UAAa,SAAS,EAAC,KAAK;UAAA,UAAEF;QAAG,GAAvBC,CAAC;UAAA;UAAA;UAAA;QAAA,QAA6B,CAAC;QACpDD,GAAG,GAAG,EAAE;MACV;IACF;IAEA,OAAOD,KAAK,CAACI,OAAO,EAAE;EACxB,CAAC;EAED,oBACE;IAAK,SAAS,EAAC,OAAO;IAAA,WACnBL,WAAW,EAAE,EACbD,QAAQ;EAAA;IAAA;IAAA;IAAA;EAAA,QACL;AAEV,CAAC;AAAC,KAtBIF,KAAK;AAwBX,eAAeA,KAAK;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}