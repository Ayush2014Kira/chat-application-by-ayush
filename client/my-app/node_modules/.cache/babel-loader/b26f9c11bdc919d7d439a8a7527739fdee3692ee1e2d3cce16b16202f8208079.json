{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ayush\\\\Downloads\\\\Socket Demo App\\\\Socket Demo App\\\\client\\\\my-app\\\\src\\\\backup_App.js\",\n  _s = $RefreshSig$();\n// import \"./App.css\";\n// import io from \"socket.io-client\";\n// import { useEffect, useState } from \"react\";\n\n// // const socket = io.connect(\"http://localhost:3001\");\n// const MyComponent = () => {\n//   const [connected, setConnected] = useState(false);\n//   const [socket, setSocket] = useState(null);\n\n//   useEffect(() => {\n//     // Connect to the Socket.IO server\n//     const newSocket = io('http://localhost:3001');\n\n//     // Set the socket and the connection status\n//     setSocket(newSocket);\n//     setConnected(newSocket.connected);\n\n//     // Disconnect the socket when the component unmounts\n//     return () => {\n//       newSocket.disconnect();\n//       setSocket(null);\n//       setConnected(false);\n//     };\n//   }, []);\n\n//   return (\n//     <div>\n//       {connected ? (\n//         <p>Socket connection is established</p>\n//       ) : (\n//         <p>Socket connection is not established</p>\n//       )}\n//     </div>\n//   );\n// };\n// function App() {\n\n//   //Room State\n//   const [room, setRoom] = useState(\"\");\n\n//   // Messages States\n//   const [message, setMessage] = useState(\"\");\n//   const [messageReceived, setMessageReceived] = useState(\"\");\n\n//   const joinRoom = () => {\n//     if (room !== \"\") {\n//       socket.emit(\"join_room\", room);\n//     }\n//   };\n//   console.log(\"r\", room, message);\n//   let stored = localStorage.getItem(\"room\");\n\n//   var flag = {\n//     room: room,\n//     message: message,\n//   };\n\n//   var arr = [];\n//   arr.push(stored, flag);\n\n//   const sendMessage = () => {\n//     let msgObj = {\n//       message: message,\n//       room: room,\n//       send: true,\n//     };\n//     socket.emit(\"send_message\", { msgObj, room });\n//     localStorage.setItem(\"room\",JSON.stringify(arr))\n//   };\n\n//   useEffect(() => {\n//     alert(\"uppr\")\n//     socket.on(\"testsocket\", (data) => {\n//       console.log(data);\n//       alert(\"niche\")\n//       setMessageReceived(data.msgObj.message);\n//       console.log(\"data\", data);\n//       let msgObj = {\n//         message: data.msgObj.message,\n//         room: data.msgObj.room,\n//         receive: true,\n//       };\n//       console.log(\"received data\", msgObj);\n//     });\n//   }, [socket]);\n\n//   return (\n//     <>\n//       <div className=\"App\">\n//         <input\n//           placeholder=\"Room Number...\"\n//           onChange={(event) => {\n//             setRoom(event.target.value);\n//           }}\n//         />\n//         <button onClick={joinRoom}>Join Room</button>\n//         <input\n//           placeholder=\"Message...\"\n//           onChange={(event) => {\n//             setMessage(event.target.value);\n//           }}\n//         />\n//         <button onClick={sendMessage}>Send Message</button>\n//         <h1> Message:</h1>\n\n//         <div id=\"message\">\n//           <p id=\"history\">\n//             \"room\" : {room}\n//             <br />\n//             \"message\" :{messageReceived}\n//           </p>\n//         </div>\n//       </div>\n//     </>\n//   );\n// }\n\n// export default MyComponent;\nimport React, { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:8000\");\nfunction App() {\n  _s();\n  const [room, setRoom] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [messageList, setMessageList] = useState([]);\n  useEffect(() => {\n    socket.on(\"receive_message\", data => {\n      setMessageList([...messageList, data]);\n    });\n  });\n  const joinRoom = () => {\n    socket.emit(\"join_room\", room);\n  };\n  const sendMessage = () => {\n    const msgObj = {\n      room: room,\n      message: message\n    };\n    socket.emit(\"send_message\", {\n      msgObj,\n      room\n    });\n    setMessageList([...messageList, msgObj]);\n    setMessage(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Room Number...\",\n      value: room,\n      onChange: event => {\n        setRoom(event.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: joinRoom,\n      children: \"Join Room\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Message...\",\n      value: message,\n      onChange: event => {\n        setMessage(event.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"Send Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: messageList.map((msgObj, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [msgObj.room, \": \", msgObj.message]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"6USBXEVuUmFbG5tm3i3XZmC70E8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","io","socket","App","room","setRoom","message","setMessage","messageList","setMessageList","on","data","joinRoom","emit","sendMessage","msgObj","event","target","value","map","index"],"sources":["C:/Users/ayush/Downloads/Socket Demo App/Socket Demo App/client/my-app/src/backup_App.js"],"sourcesContent":["// import \"./App.css\";\n// import io from \"socket.io-client\";\n// import { useEffect, useState } from \"react\";\n\n// // const socket = io.connect(\"http://localhost:3001\");\n// const MyComponent = () => {\n//   const [connected, setConnected] = useState(false);\n//   const [socket, setSocket] = useState(null);\n\n//   useEffect(() => {\n//     // Connect to the Socket.IO server\n//     const newSocket = io('http://localhost:3001');\n\n//     // Set the socket and the connection status\n//     setSocket(newSocket);\n//     setConnected(newSocket.connected);\n\n//     // Disconnect the socket when the component unmounts\n//     return () => {\n//       newSocket.disconnect();\n//       setSocket(null);\n//       setConnected(false);\n//     };\n//   }, []);\n\n//   return (\n//     <div>\n//       {connected ? (\n//         <p>Socket connection is established</p>\n//       ) : (\n//         <p>Socket connection is not established</p>\n//       )}\n//     </div>\n//   );\n// };\n// function App() {\n\n\n\n//   //Room State\n//   const [room, setRoom] = useState(\"\");\n\n//   // Messages States\n//   const [message, setMessage] = useState(\"\");\n//   const [messageReceived, setMessageReceived] = useState(\"\");\n\n//   const joinRoom = () => {\n//     if (room !== \"\") {\n//       socket.emit(\"join_room\", room);\n//     }\n//   };\n//   console.log(\"r\", room, message);\n//   let stored = localStorage.getItem(\"room\");\n\n//   var flag = {\n//     room: room,\n//     message: message,\n//   };\n\n//   var arr = [];\n//   arr.push(stored, flag);\n\n//   const sendMessage = () => {\n//     let msgObj = {\n//       message: message,\n//       room: room,\n//       send: true,\n//     };\n//     socket.emit(\"send_message\", { msgObj, room });\n//     localStorage.setItem(\"room\",JSON.stringify(arr))\n//   };\n\n//   useEffect(() => {\n//     alert(\"uppr\")\n//     socket.on(\"testsocket\", (data) => {\n//       console.log(data);\n//       alert(\"niche\")\n//       setMessageReceived(data.msgObj.message);\n//       console.log(\"data\", data);\n//       let msgObj = {\n//         message: data.msgObj.message,\n//         room: data.msgObj.room,\n//         receive: true,\n//       };\n//       console.log(\"received data\", msgObj);\n//     });\n//   }, [socket]);\n\n//   return (\n//     <>\n//       <div className=\"App\">\n//         <input\n//           placeholder=\"Room Number...\"\n//           onChange={(event) => {\n//             setRoom(event.target.value);\n//           }}\n//         />\n//         <button onClick={joinRoom}>Join Room</button>\n//         <input\n//           placeholder=\"Message...\"\n//           onChange={(event) => {\n//             setMessage(event.target.value);\n//           }}\n//         />\n//         <button onClick={sendMessage}>Send Message</button>\n//         <h1> Message:</h1>\n\n//         <div id=\"message\">\n//           <p id=\"history\">\n//             \"room\" : {room}\n//             <br />\n//             \"message\" :{messageReceived}\n//           </p>\n//         </div>\n//       </div>\n//     </>\n//   );\n// }\n\n// export default MyComponent;\nimport React, { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\n\nconst socket = io(\"http://localhost:8000\");\n\nfunction App() {\n  const [room, setRoom] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [messageList, setMessageList] = useState([]);\n\n  useEffect(() => {\n    socket.on(\"receive_message\", (data) => {\n      setMessageList([...messageList, data]);\n    });\n  });\n\n  const joinRoom = () => {\n    socket.emit(\"join_room\", room);\n  };\n\n  const sendMessage = () => {\n    const msgObj = {\n      room: room,\n      message: message,\n    };\n\n    socket.emit(\"send_message\", { msgObj, room });\n\n    setMessageList([...messageList, msgObj]);\n    setMessage(\"\");\n  };\n\n  return (\n    <div className=\"App\">\n      <input\n        placeholder=\"Room Number...\"\n        value={room}\n        onChange={(event) => {\n          setRoom(event.target.value);\n        }}\n      />\n      <button onClick={joinRoom}>Join Room</button>\n      <br />\n      <input\n        placeholder=\"Message...\"\n        value={message}\n        onChange={(event) => {\n          setMessage(event.target.value);\n        }}\n      />\n      <button onClick={sendMessage}>Send Message</button>\n      <br />\n      <ul>\n        {messageList.map((msgObj, index) => (\n          <li key={index}>\n            {msgObj.room}: {msgObj.message}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,EAAE,MAAM,kBAAkB;AAAC;AAElC,MAAMC,MAAM,GAAGD,EAAE,CAAC,uBAAuB,CAAC;AAE1C,SAASE,GAAG,GAAG;EAAA;EACb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACS,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAElDC,SAAS,CAAC,MAAM;IACdE,MAAM,CAACQ,EAAE,CAAC,iBAAiB,EAAGC,IAAI,IAAK;MACrCF,cAAc,CAAC,CAAC,GAAGD,WAAW,EAAEG,IAAI,CAAC,CAAC;IACxC,CAAC,CAAC;EACJ,CAAC,CAAC;EAEF,MAAMC,QAAQ,GAAG,MAAM;IACrBV,MAAM,CAACW,IAAI,CAAC,WAAW,EAAET,IAAI,CAAC;EAChC,CAAC;EAED,MAAMU,WAAW,GAAG,MAAM;IACxB,MAAMC,MAAM,GAAG;MACbX,IAAI,EAAEA,IAAI;MACVE,OAAO,EAAEA;IACX,CAAC;IAEDJ,MAAM,CAACW,IAAI,CAAC,cAAc,EAAE;MAAEE,MAAM;MAAEX;IAAK,CAAC,CAAC;IAE7CK,cAAc,CAAC,CAAC,GAAGD,WAAW,EAAEO,MAAM,CAAC,CAAC;IACxCR,UAAU,CAAC,EAAE,CAAC;EAChB,CAAC;EAED,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,wBAClB;MACE,WAAW,EAAC,gBAAgB;MAC5B,KAAK,EAAEH,IAAK;MACZ,QAAQ,EAAGY,KAAK,IAAK;QACnBX,OAAO,CAACW,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;MAC7B;IAAE;MAAA;MAAA;MAAA;IAAA,QACF,eACF;MAAQ,OAAO,EAAEN,QAAS;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAmB,eAC7C;MAAA;MAAA;MAAA;IAAA,QAAM,eACN;MACE,WAAW,EAAC,YAAY;MACxB,KAAK,EAAEN,OAAQ;MACf,QAAQ,EAAGU,KAAK,IAAK;QACnBT,UAAU,CAACS,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;MAChC;IAAE;MAAA;MAAA;MAAA;IAAA,QACF,eACF;MAAQ,OAAO,EAAEJ,WAAY;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAsB,eACnD;MAAA;MAAA;MAAA;IAAA,QAAM,eACN;MAAA,UACGN,WAAW,CAACW,GAAG,CAAC,CAACJ,MAAM,EAAEK,KAAK,kBAC7B;QAAA,WACGL,MAAM,CAACX,IAAI,QAAIW,MAAM,CAACT,OAAO;MAAA,GADvBc,KAAK;QAAA;QAAA;QAAA;MAAA,QAGf;IAAC;MAAA;MAAA;MAAA;IAAA,QACC;EAAA;IAAA;IAAA;IAAA;EAAA,QACD;AAEV;AAAC,GAxDQjB,GAAG;AAAA,KAAHA,GAAG;AA0DZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}