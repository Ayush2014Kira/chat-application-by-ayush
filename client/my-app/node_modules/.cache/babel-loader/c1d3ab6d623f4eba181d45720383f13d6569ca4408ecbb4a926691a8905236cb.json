{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ayush\\\\Downloads\\\\Socket Demo App\\\\Socket Demo App\\\\client\\\\my-app\\\\src\\\\backup_App.js\",\n  _s = $RefreshSig$();\n// import \"./App.css\";\n// import io from \"socket.io-client\";\n// import { useEffect, useState } from \"react\";\n\n// // const socket = io.connect(\"http://localhost:3001\");\n// const MyComponent = () => {\n//   const [connected, setConnected] = useState(false);\n//   const [socket, setSocket] = useState(null);\n\n//   useEffect(() => {\n//     // Connect to the Socket.IO server\n//     const newSocket = io('http://localhost:3001');\n\n//     // Set the socket and the connection status\n//     setSocket(newSocket);\n//     setConnected(newSocket.connected);\n\n//     // Disconnect the socket when the component unmounts\n//     return () => {\n//       newSocket.disconnect();\n//       setSocket(null);\n//       setConnected(false);\n//     };\n//   }, []);\n\n//   return (\n//     <div>\n//       {connected ? (\n//         <p>Socket connection is established</p>\n//       ) : (\n//         <p>Socket connection is not established</p>\n//       )}\n//     </div>\n//   );\n// };\n// function App() {\n\n//   //Room State\n//   const [room, setRoom] = useState(\"\");\n\n//   // Messages States\n//   const [message, setMessage] = useState(\"\");\n//   const [messageReceived, setMessageReceived] = useState(\"\");\n\n//   const joinRoom = () => {\n//     if (room !== \"\") {\n//       socket.emit(\"join_room\", room);\n//     }\n//   };\n//   console.log(\"r\", room, message);\n//   let stored = localStorage.getItem(\"room\");\n\n//   var flag = {\n//     room: room,\n//     message: message,\n//   };\n\n//   var arr = [];\n//   arr.push(stored, flag);\n\n//   const sendMessage = () => {\n//     let msgObj = {\n//       message: message,\n//       room: room,\n//       send: true,\n//     };\n//     socket.emit(\"send_message\", { msgObj, room });\n//     localStorage.setItem(\"room\",JSON.stringify(arr))\n//   };\n\n//   useEffect(() => {\n//     alert(\"uppr\")\n//     socket.on(\"testsocket\", (data) => {\n//       console.log(data);\n//       alert(\"niche\")\n//       setMessageReceived(data.msgObj.message);\n//       console.log(\"data\", data);\n//       let msgObj = {\n//         message: data.msgObj.message,\n//         room: data.msgObj.room,\n//         receive: true,\n//       };\n//       console.log(\"received data\", msgObj);\n//     });\n//   }, [socket]);\n\n//   return (\n//     <>\n//       <div className=\"App\">\n//         <input\n//           placeholder=\"Room Number...\"\n//           onChange={(event) => {\n//             setRoom(event.target.value);\n//           }}\n//         />\n//         <button onClick={joinRoom}>Join Room</button>\n//         <input\n//           placeholder=\"Message...\"\n//           onChange={(event) => {\n//             setMessage(event.target.value);\n//           }}\n//         />\n//         <button onClick={sendMessage}>Send Message</button>\n//         <h1> Message:</h1>\n\n//         <div id=\"message\">\n//           <p id=\"history\">\n//             \"room\" : {room}\n//             <br />\n//             \"message\" :{messageReceived}\n//           </p>\n//         </div>\n//       </div>\n//     </>\n//   );\n// }\n\n// export default MyComponent;\nimport React, { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [socket, setSocket] = useState(null);\n  const [room, setRoom] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [messageReceived, setMessageReceived] = useState(\"\");\n  const [storedMessages, setStoredMessages] = useState([]);\n  useEffect(() => {\n    const newSocket = io(\"http://localhost:8001\");\n    setSocket(newSocket);\n    return () => {\n      newSocket.disconnect();\n    };\n  }, []);\n  useEffect(() => {\n    if (!socket) return;\n    socket.on(\"connect\", () => {\n      console.log(\"Connected to server\");\n    });\n    socket.on(\"disconnect\", () => {\n      console.log(\"Disconnected from server\");\n    });\n    socket.on(\"testsocket\", data => {\n      console.log(\"Received data:\", data);\n      setMessageReceived(data.msgObj.message);\n      const flag = {\n        room: data.msgObj.room,\n        message: data.msgObj.message\n      };\n      setStoredMessages(prevState => [...prevState, flag]);\n    });\n    return () => {\n      socket.off(\"connect\");\n      socket.off(\"disconnect\");\n      socket.off(\"testsocket\");\n    };\n  }, [socket]);\n  const joinRoom = () => {\n    if (room !== \"\") {\n      socket.emit(\"join_room\", room);\n    }\n  };\n  const sendMessage = () => {\n    if (message === \"\") return;\n    const msgObj = {\n      message: message,\n      room: room,\n      send: true\n    };\n    socket.emit(\"send_message\", msgObj);\n    const flag = {\n      room: room,\n      message: message\n    };\n    setStoredMessages(prevState => [...prevState, flag]);\n    localStorage.setItem(\"room\", JSON.stringify(storedMessages));\n    setMessage(\"\");\n  };\n  useEffect(() => {\n    const stored = localStorage.getItem(\"room\");\n    console.log(stored);\n    if (stored) {\n      setStoredMessages(JSON.parse(stored));\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Room Number...\",\n      value: room,\n      onChange: event => {\n        setRoom(event.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: joinRoom,\n      children: \"Join Room\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Message...\",\n      value: message,\n      onChange: event => {\n        setMessage(event.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"Send Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Message:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"message\",\n      children: [storedMessages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Room: \", msg.room, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 13\n        }, this), \"Message: \", msg.message]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: \"red\"\n        },\n        children: [\"Room: \", room, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this), \"Message: \", messageReceived]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"EXn1dUFHj3cC7whQ4FvfCkk8lSs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","io","App","socket","setSocket","room","setRoom","message","setMessage","messageReceived","setMessageReceived","storedMessages","setStoredMessages","newSocket","disconnect","on","console","log","data","msgObj","flag","prevState","off","joinRoom","emit","sendMessage","send","localStorage","setItem","JSON","stringify","stored","getItem","parse","event","target","value","map","msg","index","color"],"sources":["C:/Users/ayush/Downloads/Socket Demo App/Socket Demo App/client/my-app/src/backup_App.js"],"sourcesContent":["// import \"./App.css\";\n// import io from \"socket.io-client\";\n// import { useEffect, useState } from \"react\";\n\n// // const socket = io.connect(\"http://localhost:3001\");\n// const MyComponent = () => {\n//   const [connected, setConnected] = useState(false);\n//   const [socket, setSocket] = useState(null);\n\n//   useEffect(() => {\n//     // Connect to the Socket.IO server\n//     const newSocket = io('http://localhost:3001');\n\n//     // Set the socket and the connection status\n//     setSocket(newSocket);\n//     setConnected(newSocket.connected);\n\n//     // Disconnect the socket when the component unmounts\n//     return () => {\n//       newSocket.disconnect();\n//       setSocket(null);\n//       setConnected(false);\n//     };\n//   }, []);\n\n//   return (\n//     <div>\n//       {connected ? (\n//         <p>Socket connection is established</p>\n//       ) : (\n//         <p>Socket connection is not established</p>\n//       )}\n//     </div>\n//   );\n// };\n// function App() {\n\n\n\n//   //Room State\n//   const [room, setRoom] = useState(\"\");\n\n//   // Messages States\n//   const [message, setMessage] = useState(\"\");\n//   const [messageReceived, setMessageReceived] = useState(\"\");\n\n//   const joinRoom = () => {\n//     if (room !== \"\") {\n//       socket.emit(\"join_room\", room);\n//     }\n//   };\n//   console.log(\"r\", room, message);\n//   let stored = localStorage.getItem(\"room\");\n\n//   var flag = {\n//     room: room,\n//     message: message,\n//   };\n\n//   var arr = [];\n//   arr.push(stored, flag);\n\n//   const sendMessage = () => {\n//     let msgObj = {\n//       message: message,\n//       room: room,\n//       send: true,\n//     };\n//     socket.emit(\"send_message\", { msgObj, room });\n//     localStorage.setItem(\"room\",JSON.stringify(arr))\n//   };\n\n//   useEffect(() => {\n//     alert(\"uppr\")\n//     socket.on(\"testsocket\", (data) => {\n//       console.log(data);\n//       alert(\"niche\")\n//       setMessageReceived(data.msgObj.message);\n//       console.log(\"data\", data);\n//       let msgObj = {\n//         message: data.msgObj.message,\n//         room: data.msgObj.room,\n//         receive: true,\n//       };\n//       console.log(\"received data\", msgObj);\n//     });\n//   }, [socket]);\n\n//   return (\n//     <>\n//       <div className=\"App\">\n//         <input\n//           placeholder=\"Room Number...\"\n//           onChange={(event) => {\n//             setRoom(event.target.value);\n//           }}\n//         />\n//         <button onClick={joinRoom}>Join Room</button>\n//         <input\n//           placeholder=\"Message...\"\n//           onChange={(event) => {\n//             setMessage(event.target.value);\n//           }}\n//         />\n//         <button onClick={sendMessage}>Send Message</button>\n//         <h1> Message:</h1>\n\n//         <div id=\"message\">\n//           <p id=\"history\">\n//             \"room\" : {room}\n//             <br />\n//             \"message\" :{messageReceived}\n//           </p>\n//         </div>\n//       </div>\n//     </>\n//   );\n// }\n\n// export default MyComponent;\nimport React, { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\n\nfunction App() {\n  const [socket, setSocket] = useState(null);\n  const [room, setRoom] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [messageReceived, setMessageReceived] = useState(\"\");\n  const [storedMessages, setStoredMessages] = useState([]);\n\n  useEffect(() => {\n    const newSocket = io(\"http://localhost:8001\");\n\n    setSocket(newSocket);\n\n    return () => {\n      newSocket.disconnect();\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!socket) return;\n\n    socket.on(\"connect\", () => {\n      console.log(\"Connected to server\");\n    });\n\n    socket.on(\"disconnect\", () => {\n      console.log(\"Disconnected from server\");\n    });\n\n    socket.on(\"testsocket\", (data) => {\n      console.log(\"Received data:\", data);\n\n      setMessageReceived(data.msgObj.message);\n\n      const flag = {\n        room: data.msgObj.room,\n        message: data.msgObj.message,\n      };\n\n      setStoredMessages((prevState) => [...prevState, flag]);\n    });\n\n    return () => {\n      socket.off(\"connect\");\n      socket.off(\"disconnect\");\n      socket.off(\"testsocket\");\n    };\n  }, [socket]);\n\n  const joinRoom = () => {\n    if (room !== \"\") {\n      socket.emit(\"join_room\", room);\n    }\n  };\n\n  const sendMessage = () => {\n    if (message === \"\") return;\n\n    const msgObj = {\n      message: message,\n      room: room,\n      send: true,\n    };\n\n    socket.emit(\"send_message\", msgObj);\n\n    const flag = {\n      room: room,\n      message: message,\n    };\n\n    setStoredMessages((prevState) => [...prevState, flag]);\n\n    localStorage.setItem(\"room\", JSON.stringify(storedMessages));\n\n    setMessage(\"\");\n  };\n\n  useEffect(() => {\n    const stored = localStorage.getItem(\"room\");\n    console.log(stored);\n    if (stored) {\n      setStoredMessages(JSON.parse(stored));\n    }\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <input\n        placeholder=\"Room Number...\"\n        value={room}\n        onChange={(event) => {\n          setRoom(event.target.value);\n        }}\n      />\n      <button onClick={joinRoom}>Join Room</button>\n      <input\n        placeholder=\"Message...\"\n        value={message}\n        onChange={(event) => {\n          setMessage(event.target.value);\n        }}\n      />\n      <button onClick={sendMessage}>Send Message</button>\n      <h1>Message:</h1>\n      <div id=\"message\">\n        {storedMessages.map((msg, index) => (\n          <p key={index}>\n            Room: {msg.room}\n            <br />\n            Message: {msg.message}\n          </p>\n        ))}\n        <p style={{ color: \"red\" }}>\n          Room: {room}\n          <br />\n          Message: {messageReceived}\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,EAAE,MAAM,kBAAkB;AAAC;AAElC,SAASC,GAAG,GAAG;EAAA;EACb,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGL,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACM,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACU,eAAe,EAAEC,kBAAkB,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACY,cAAc,EAAEC,iBAAiB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAExDC,SAAS,CAAC,MAAM;IACd,MAAMa,SAAS,GAAGZ,EAAE,CAAC,uBAAuB,CAAC;IAE7CG,SAAS,CAACS,SAAS,CAAC;IAEpB,OAAO,MAAM;MACXA,SAAS,CAACC,UAAU,EAAE;IACxB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAENd,SAAS,CAAC,MAAM;IACd,IAAI,CAACG,MAAM,EAAE;IAEbA,MAAM,CAACY,EAAE,CAAC,SAAS,EAAE,MAAM;MACzBC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IACpC,CAAC,CAAC;IAEFd,MAAM,CAACY,EAAE,CAAC,YAAY,EAAE,MAAM;MAC5BC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IACzC,CAAC,CAAC;IAEFd,MAAM,CAACY,EAAE,CAAC,YAAY,EAAGG,IAAI,IAAK;MAChCF,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEC,IAAI,CAAC;MAEnCR,kBAAkB,CAACQ,IAAI,CAACC,MAAM,CAACZ,OAAO,CAAC;MAEvC,MAAMa,IAAI,GAAG;QACXf,IAAI,EAAEa,IAAI,CAACC,MAAM,CAACd,IAAI;QACtBE,OAAO,EAAEW,IAAI,CAACC,MAAM,CAACZ;MACvB,CAAC;MAEDK,iBAAiB,CAAES,SAAS,IAAK,CAAC,GAAGA,SAAS,EAAED,IAAI,CAAC,CAAC;IACxD,CAAC,CAAC;IAEF,OAAO,MAAM;MACXjB,MAAM,CAACmB,GAAG,CAAC,SAAS,CAAC;MACrBnB,MAAM,CAACmB,GAAG,CAAC,YAAY,CAAC;MACxBnB,MAAM,CAACmB,GAAG,CAAC,YAAY,CAAC;IAC1B,CAAC;EACH,CAAC,EAAE,CAACnB,MAAM,CAAC,CAAC;EAEZ,MAAMoB,QAAQ,GAAG,MAAM;IACrB,IAAIlB,IAAI,KAAK,EAAE,EAAE;MACfF,MAAM,CAACqB,IAAI,CAAC,WAAW,EAAEnB,IAAI,CAAC;IAChC;EACF,CAAC;EAED,MAAMoB,WAAW,GAAG,MAAM;IACxB,IAAIlB,OAAO,KAAK,EAAE,EAAE;IAEpB,MAAMY,MAAM,GAAG;MACbZ,OAAO,EAAEA,OAAO;MAChBF,IAAI,EAAEA,IAAI;MACVqB,IAAI,EAAE;IACR,CAAC;IAEDvB,MAAM,CAACqB,IAAI,CAAC,cAAc,EAAEL,MAAM,CAAC;IAEnC,MAAMC,IAAI,GAAG;MACXf,IAAI,EAAEA,IAAI;MACVE,OAAO,EAAEA;IACX,CAAC;IAEDK,iBAAiB,CAAES,SAAS,IAAK,CAAC,GAAGA,SAAS,EAAED,IAAI,CAAC,CAAC;IAEtDO,YAAY,CAACC,OAAO,CAAC,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACnB,cAAc,CAAC,CAAC;IAE5DH,UAAU,CAAC,EAAE,CAAC;EAChB,CAAC;EAEDR,SAAS,CAAC,MAAM;IACd,MAAM+B,MAAM,GAAGJ,YAAY,CAACK,OAAO,CAAC,MAAM,CAAC;IAC3ChB,OAAO,CAACC,GAAG,CAACc,MAAM,CAAC;IACnB,IAAIA,MAAM,EAAE;MACVnB,iBAAiB,CAACiB,IAAI,CAACI,KAAK,CAACF,MAAM,CAAC,CAAC;IACvC;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE;IAAK,SAAS,EAAC,KAAK;IAAA,wBAClB;MACE,WAAW,EAAC,gBAAgB;MAC5B,KAAK,EAAE1B,IAAK;MACZ,QAAQ,EAAG6B,KAAK,IAAK;QACnB5B,OAAO,CAAC4B,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;MAC7B;IAAE;MAAA;MAAA;MAAA;IAAA,QACF,eACF;MAAQ,OAAO,EAAEb,QAAS;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAmB,eAC7C;MACE,WAAW,EAAC,YAAY;MACxB,KAAK,EAAEhB,OAAQ;MACf,QAAQ,EAAG2B,KAAK,IAAK;QACnB1B,UAAU,CAAC0B,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;MAChC;IAAE;MAAA;MAAA;MAAA;IAAA,QACF,eACF;MAAQ,OAAO,EAAEX,WAAY;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAsB,eACnD;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAiB,eACjB;MAAK,EAAE,EAAC,SAAS;MAAA,WACdd,cAAc,CAAC0B,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBAC7B;QAAA,qBACSD,GAAG,CAACjC,IAAI,eACf;UAAA;UAAA;UAAA;QAAA,QAAM,eACIiC,GAAG,CAAC/B,OAAO;MAAA,GAHfgC,KAAK;QAAA;QAAA;QAAA;MAAA,QAKd,CAAC,eACF;QAAG,KAAK,EAAE;UAAEC,KAAK,EAAE;QAAM,CAAE;QAAA,qBAClBnC,IAAI,eACX;UAAA;UAAA;UAAA;QAAA,QAAM,eACII,eAAe;MAAA;QAAA;QAAA;QAAA;MAAA,QACvB;IAAA;MAAA;MAAA;MAAA;IAAA,QACA;EAAA;IAAA;IAAA;IAAA;EAAA,QACF;AAEV;AAAC,GAxHQP,GAAG;AAAA,KAAHA,GAAG;AA0HZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}