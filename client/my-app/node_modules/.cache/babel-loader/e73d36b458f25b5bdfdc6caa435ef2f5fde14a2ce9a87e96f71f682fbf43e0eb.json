{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ayush\\\\Downloads\\\\Socket Demo App\\\\Socket Demo App\\\\client\\\\my-app\\\\src\\\\backup_App.js\",\n  _s = $RefreshSig$();\n// // import \"./App.css\";\n// // import io from \"socket.io-client\";\n// // import { useEffect, useState } from \"react\";\n\n// // // const socket = io.connect(\"http://localhost:3001\");\n// // const MyComponent = () => {\n// //   const [connected, setConnected] = useState(false);\n// //   const [socket, setSocket] = useState(null);\n\n// //   useEffect(() => {\n// //     // Connect to the Socket.IO server\n// //     const newSocket = io('http://localhost:3001');\n\n// //     // Set the socket and the connection status\n// //     setSocket(newSocket);\n// //     setConnected(newSocket.connected);\n\n// //     // Disconnect the socket when the component unmounts\n// //     return () => {\n// //       newSocket.disconnect();\n// //       setSocket(null);\n// //       setConnected(false);\n// //     };\n// //   }, []);\n\n// //   return (\n// //     <div>\n// //       {connected ? (\n// //         <p>Socket connection is established</p>\n// //       ) : (\n// //         <p>Socket connection is not established</p>\n// //       )}\n// //     </div>\n// //   );\n// // };\n// // function App() {\n\n// //   //Room State\n// //   const [room, setRoom] = useState(\"\");\n\n// //   // Messages States\n// //   const [message, setMessage] = useState(\"\");\n// //   const [messageReceived, setMessageReceived] = useState(\"\");\n\n// //   const joinRoom = () => {\n// //     if (room !== \"\") {\n// //       socket.emit(\"join_room\", room);\n// //     }\n// //   };\n// //   console.log(\"r\", room, message);\n// //   let stored = localStorage.getItem(\"room\");\n\n// //   var flag = {\n// //     room: room,\n// //     message: message,\n// //   };\n\n// //   var arr = [];\n// //   arr.push(stored, flag);\n\n// //   const sendMessage = () => {\n// //     let msgObj = {\n// //       message: message,\n// //       room: room,\n// //       send: true,\n// //     };\n// //     socket.emit(\"send_message\", { msgObj, room });\n// //     localStorage.setItem(\"room\",JSON.stringify(arr))\n// //   };\n\n// //   useEffect(() => {\n// //     alert(\"uppr\")\n// //     socket.on(\"testsocket\", (data) => {\n// //       console.log(data);\n// //       alert(\"niche\")\n// //       setMessageReceived(data.msgObj.message);\n// //       console.log(\"data\", data);\n// //       let msgObj = {\n// //         message: data.msgObj.message,\n// //         room: data.msgObj.room,\n// //         receive: true,\n// //       };\n// //       console.log(\"received data\", msgObj);\n// //     });\n// //   }, [socket]);\n\n// //   return (\n// //     <>\n// //       <div className=\"App\">\n// //         <input\n// //           placeholder=\"Room Number...\"\n// //           onChange={(event) => {\n// //             setRoom(event.target.value);\n// //           }}\n// //         />\n// //         <button onClick={joinRoom}>Join Room</button>\n// //         <input\n// //           placeholder=\"Message...\"\n// //           onChange={(event) => {\n// //             setMessage(event.target.value);\n// //           }}\n// //         />\n// //         <button onClick={sendMessage}>Send Message</button>\n// //         <h1> Message:</h1>\n\n// //         <div id=\"message\">\n// //           <p id=\"history\">\n// //             \"room\" : {room}\n// //             <br />\n// //             \"message\" :{messageReceived}\n// //           </p>\n// //         </div>\n// //       </div>\n// //     </>\n// //   );\n// // }\n\n// // export default MyComponent;\n// import React, { useState, useEffect } from \"react\";\n// import io from \"socket.io-client\";\n\n// const socket = io(\"http://localhost:8000\");\n\n// function App() {\n//   const [room, setRoom] = useState(\"\");\n//   const [message, setMessage] = useState(\"\");\n//   const [messageList, setMessageList] = useState([]);\n\n//   useEffect(() => {\n//     socket.on(\"receive_message\", (data) => {\n//       setMessageList([...messageList, data]);\n//     });\n//   });\n\n//   const joinRoom = () => {\n//     socket.emit(\"join_room\", room);\n//   };\n\n//   const sendMessage = () => {\n//     const msgObj = {\n//       room: room,\n//       message: message,\n//     };\n\n//     socket.emit(\"send_message\", { msgObj, room });\n\n//     setMessageList([...messageList, msgObj]);\n//     setMessage(\"\");\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <input\n//         placeholder=\"Room Number...\"\n//         value={room}\n//         onChange={(event) => {\n//           setRoom(event.target.value);\n//         }}\n//       />\n//       <button onClick={joinRoom}>Join Room</button>\n//       <br />\n//       <input\n//         placeholder=\"Message...\"\n//         value={message}\n//         onChange={(event) => {\n//           setMessage(event.target.value);\n//         }}\n//       />\n//       <button onClick={sendMessage}>Send Message</button>\n//       <br />\n//       <ul>\n//         {messageList.map((msgObj, index) => (\n//           <li key={index}>\n//             {msgObj.room}: {msgObj.message}\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n//  game palyer\n\nimport React, { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io(\"http://localhost:4000\");\nfunction GameBoard(props) {\n  _s();\n  const {\n    player\n  } = props;\n  const [opponent, setOpponent] = useState(null);\n  const [playerChoice, setPlayerChoice] = useState(null);\n  const [opponentChoice, setOpponentChoice] = useState(null);\n  const [result, setResult] = useState(null);\n  useEffect(() => {\n    socket.on(\"opponentFound\", opponent => {\n      setOpponent(opponent);\n    });\n    socket.on(\"choiceMade\", data => {\n      if (data.player === player) {\n        setPlayerChoice(data.choice);\n      } else {\n        setOpponentChoice(data.choice);\n      }\n    });\n    socket.on(\"gameResult\", data => {\n      setResult(data.result);\n      setPlayerChoice(null);\n      setOpponentChoice(null);\n    });\n    socket.on(\"gameReset\", () => {\n      setResult(null);\n    });\n  }, [player]);\n  function handleChoiceSelect(choice) {\n    setPlayerChoice(choice);\n    socket.emit(\"makeChoice\", {\n      player: player,\n      choice: choice\n    });\n  }\n  function renderChoiceButtons() {\n    if (playerChoice === null) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Select your choice:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleChoiceSelect(\"rock\"),\n          children: \"Rock\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleChoiceSelect(\"paper\"),\n          children: \"Paper\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleChoiceSelect(\"scissors\"),\n          children: \"Scissors\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this);\n    } else {\n      return null;\n    }\n  }\n  function renderChoices() {\n    if (playerChoice !== null && opponentChoice !== null) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Your choice: \", playerChoice]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [opponent.name, \"'s choice: \", opponentChoice]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this);\n    } else {\n      return null;\n    }\n  }\n  function renderResult() {\n    if (result !== null) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: result\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => socket.emit(\"resetGame\"),\n          children: \"Play Again\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this);\n    } else {\n      return null;\n    }\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Rock Paper Scissors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: player.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }, this), opponent ? /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: opponent.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 19\n    }, this) : null, renderChoiceButtons(), renderChoices(), renderResult()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 276,\n    columnNumber: 5\n  }, this);\n}\n_s(GameBoard, \"sukVKHrRhFoA8dx6BF1LUxPW0Uc=\");\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","useState","useEffect","io","socket","GameBoard","props","player","opponent","setOpponent","playerChoice","setPlayerChoice","opponentChoice","setOpponentChoice","result","setResult","on","data","choice","handleChoiceSelect","emit","renderChoiceButtons","renderChoices","name","renderResult"],"sources":["C:/Users/ayush/Downloads/Socket Demo App/Socket Demo App/client/my-app/src/backup_App.js"],"sourcesContent":["// // import \"./App.css\";\n// // import io from \"socket.io-client\";\n// // import { useEffect, useState } from \"react\";\n\n// // // const socket = io.connect(\"http://localhost:3001\");\n// // const MyComponent = () => {\n// //   const [connected, setConnected] = useState(false);\n// //   const [socket, setSocket] = useState(null);\n\n// //   useEffect(() => {\n// //     // Connect to the Socket.IO server\n// //     const newSocket = io('http://localhost:3001');\n\n// //     // Set the socket and the connection status\n// //     setSocket(newSocket);\n// //     setConnected(newSocket.connected);\n\n// //     // Disconnect the socket when the component unmounts\n// //     return () => {\n// //       newSocket.disconnect();\n// //       setSocket(null);\n// //       setConnected(false);\n// //     };\n// //   }, []);\n\n// //   return (\n// //     <div>\n// //       {connected ? (\n// //         <p>Socket connection is established</p>\n// //       ) : (\n// //         <p>Socket connection is not established</p>\n// //       )}\n// //     </div>\n// //   );\n// // };\n// // function App() {\n\n\n\n// //   //Room State\n// //   const [room, setRoom] = useState(\"\");\n\n// //   // Messages States\n// //   const [message, setMessage] = useState(\"\");\n// //   const [messageReceived, setMessageReceived] = useState(\"\");\n\n// //   const joinRoom = () => {\n// //     if (room !== \"\") {\n// //       socket.emit(\"join_room\", room);\n// //     }\n// //   };\n// //   console.log(\"r\", room, message);\n// //   let stored = localStorage.getItem(\"room\");\n\n// //   var flag = {\n// //     room: room,\n// //     message: message,\n// //   };\n\n// //   var arr = [];\n// //   arr.push(stored, flag);\n\n// //   const sendMessage = () => {\n// //     let msgObj = {\n// //       message: message,\n// //       room: room,\n// //       send: true,\n// //     };\n// //     socket.emit(\"send_message\", { msgObj, room });\n// //     localStorage.setItem(\"room\",JSON.stringify(arr))\n// //   };\n\n// //   useEffect(() => {\n// //     alert(\"uppr\")\n// //     socket.on(\"testsocket\", (data) => {\n// //       console.log(data);\n// //       alert(\"niche\")\n// //       setMessageReceived(data.msgObj.message);\n// //       console.log(\"data\", data);\n// //       let msgObj = {\n// //         message: data.msgObj.message,\n// //         room: data.msgObj.room,\n// //         receive: true,\n// //       };\n// //       console.log(\"received data\", msgObj);\n// //     });\n// //   }, [socket]);\n\n// //   return (\n// //     <>\n// //       <div className=\"App\">\n// //         <input\n// //           placeholder=\"Room Number...\"\n// //           onChange={(event) => {\n// //             setRoom(event.target.value);\n// //           }}\n// //         />\n// //         <button onClick={joinRoom}>Join Room</button>\n// //         <input\n// //           placeholder=\"Message...\"\n// //           onChange={(event) => {\n// //             setMessage(event.target.value);\n// //           }}\n// //         />\n// //         <button onClick={sendMessage}>Send Message</button>\n// //         <h1> Message:</h1>\n\n// //         <div id=\"message\">\n// //           <p id=\"history\">\n// //             \"room\" : {room}\n// //             <br />\n// //             \"message\" :{messageReceived}\n// //           </p>\n// //         </div>\n// //       </div>\n// //     </>\n// //   );\n// // }\n\n// // export default MyComponent;\n// import React, { useState, useEffect } from \"react\";\n// import io from \"socket.io-client\";\n\n// const socket = io(\"http://localhost:8000\");\n\n// function App() {\n//   const [room, setRoom] = useState(\"\");\n//   const [message, setMessage] = useState(\"\");\n//   const [messageList, setMessageList] = useState([]);\n\n//   useEffect(() => {\n//     socket.on(\"receive_message\", (data) => {\n//       setMessageList([...messageList, data]);\n//     });\n//   });\n\n//   const joinRoom = () => {\n//     socket.emit(\"join_room\", room);\n//   };\n\n//   const sendMessage = () => {\n//     const msgObj = {\n//       room: room,\n//       message: message,\n//     };\n\n//     socket.emit(\"send_message\", { msgObj, room });\n\n//     setMessageList([...messageList, msgObj]);\n//     setMessage(\"\");\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <input\n//         placeholder=\"Room Number...\"\n//         value={room}\n//         onChange={(event) => {\n//           setRoom(event.target.value);\n//         }}\n//       />\n//       <button onClick={joinRoom}>Join Room</button>\n//       <br />\n//       <input\n//         placeholder=\"Message...\"\n//         value={message}\n//         onChange={(event) => {\n//           setMessage(event.target.value);\n//         }}\n//       />\n//       <button onClick={sendMessage}>Send Message</button>\n//       <br />\n//       <ul>\n//         {messageList.map((msgObj, index) => (\n//           <li key={index}>\n//             {msgObj.room}: {msgObj.message}\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\n//  game palyer\n\n\n\n\nimport React, { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\n\nconst socket = io(\"http://localhost:4000\");\n\nfunction GameBoard(props) {\n  const { player } = props;\n  const [opponent, setOpponent] = useState(null);\n  const [playerChoice, setPlayerChoice] = useState(null);\n  const [opponentChoice, setOpponentChoice] = useState(null);\n  const [result, setResult] = useState(null);\n\n  useEffect(() => {\n    socket.on(\"opponentFound\", (opponent) => {\n      setOpponent(opponent);\n    });\n\n    socket.on(\"choiceMade\", (data) => {\n      if (data.player === player) {\n        setPlayerChoice(data.choice);\n      } else {\n        setOpponentChoice(data.choice);\n      }\n    });\n\n    socket.on(\"gameResult\", (data) => {\n      setResult(data.result);\n      setPlayerChoice(null);\n      setOpponentChoice(null);\n    });\n\n    socket.on(\"gameReset\", () => {\n      setResult(null);\n    });\n  }, [player]);\n\n  function handleChoiceSelect(choice) {\n    setPlayerChoice(choice);\n    socket.emit(\"makeChoice\", { player: player, choice: choice });\n  }\n\n  function renderChoiceButtons() {\n    if (playerChoice === null) {\n      return (\n        <div>\n          <h2>Select your choice:</h2>\n          <button onClick={() => handleChoiceSelect(\"rock\")}>Rock</button>\n          <button onClick={() => handleChoiceSelect(\"paper\")}>Paper</button>\n          <button onClick={() => handleChoiceSelect(\"scissors\")}>Scissors</button>\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  function renderChoices() {\n    if (playerChoice !== null && opponentChoice !== null) {\n      return (\n        <div>\n          <h2>Your choice: {playerChoice}</h2>\n          <h2>{opponent.name}'s choice: {opponentChoice}</h2>\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  function renderResult() {\n    if (result !== null) {\n      return (\n        <div>\n          <h2>{result}</h2>\n          <button onClick={() => socket.emit(\"resetGame\")}>Play Again</button>\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  return (\n    <div>\n      <h1>Rock Paper Scissors</h1>\n      <h2>{player.name}</h2>\n      {opponent ? <h2>{opponent.name}</h2> : null}\n      {renderChoiceButtons()}\n      {renderChoices()}\n      {renderResult()}\n    </div>\n  );\n}\n\nexport default GameBoard;\n"],"mappings":";;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;;AAKA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,EAAE,MAAM,kBAAkB;AAAC;AAElC,MAAMC,MAAM,GAAGD,EAAE,CAAC,uBAAuB,CAAC;AAE1C,SAASE,SAAS,CAACC,KAAK,EAAE;EAAA;EACxB,MAAM;IAAEC;EAAO,CAAC,GAAGD,KAAK;EACxB,MAAM,CAACE,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACS,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACW,cAAc,EAAEC,iBAAiB,CAAC,GAAGZ,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"},"metadata":{},"sourceType":"module","externalDependencies":[]}