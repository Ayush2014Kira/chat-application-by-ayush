{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ayush\\\\Downloads\\\\Socket Demo App\\\\Socket Demo App\\\\client\\\\my-app\\\\src\\\\test.js\",\n  _s = $RefreshSig$();\n// // App.js\n\n// import React, { useState, useEffect } from 'react';\n// import io from 'socket.io-client';\n// import './App.css';\n\n// const socket = io(\"http://localhost:8001\");\n// function Apptest() {\n//   const [roomId, setRoomId] = useState('');\n//   const [playerName, setPlayerName] = useState('');\n//   const [opponentName, setOpponentName] = useState('');\n//   const [playerChoice, setPlayerChoice] = useState('');\n//   const [opponentChoice, setOpponentChoice] = useState('');\n//   const [gameStatus, setGameStatus] = useState('');\n\n//   useEffect(() => {\n//     socket.on('connect', () => {\n//       console.log('Connected to server!');\n//     });\n\n//     socket.on('joinedRoom', ({ playerName, opponentName }) => {\n//       console.log(`Player ${playerName} joined the room.`);\n//       setPlayerName(playerName);\n//       setOpponentName(opponentName);\n//     });\n\n//     socket.on('gameStarted', () => {\n//       console.log('Game started!');\n//     });\n\n//     socket.on('opponentChoice', ({ choice }) => {\n//       console.log(`Opponent chose ${choice}.`);\n//       setOpponentChoice(choice);\n//     });\n\n//     socket.on('gameResult', ({ result }) => {\n//       console.log(`Game result: ${result}.`);\n//       setGameStatus(result);\n//     });\n\n//     socket.on('gameRestart', () => {\n//       console.log('Game restarted!');\n//       setPlayerChoice('');\n//       setOpponentChoice('');\n//       setGameStatus('');\n//     });\n\n//     socket.on('disconnect', () => {\n//       console.log('Disconnected from server.');\n//     });\n\n//     return () => {\n//       socket.disconnect();\n//     };\n//   }, []);\n\n//   const handleJoinRoom = () => {\n//     if (roomId && playerName) {\n//       socket.emit('joinRoom', { roomId, playerName });\n//     }\n//   };\n\n//   const handlePlayerChoice = (choice) => {\n//     if (!playerChoice) {\n//       setPlayerChoice(choice);\n//       socket.emit('playerChoice', { choice });\n//     }\n//   };\n\n//   const handleRestartGame = () => {\n//     socket.emit('restartGame');\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       {!playerName ? (\n//         <div>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Enter your name\"\n//             value={playerName}\n//             onChange={(e) => setPlayerName(e.target.value)}\n//           />\n//           <input\n//             type=\"text\"\n//             placeholder=\"Enter room ID\"\n//             value={roomId}\n//             onChange={(e) => setRoomId(e.target.value)}\n//           />\n//           <button onClick={handleJoinRoom}>Join Room</button>\n//         </div>\n//       ) : (\n//         <div>\n//           <h1>Rock Paper Scissors</h1>\n//           <h2>Room: {roomId}</h2>\n//           <h3>{playerName} vs {opponentName}</h3>\n//           <div className=\"hands\">\n//             <div className=\"hand paper\" onClick={() => handlePlayerChoice('paper')}>\n//               <img src=\"./Paper.png\" alt=\"paper-hand\" />\n//             </div>\n//             <div className=\"hand scissors\" onClick={() => handlePlayerChoice('scissors')}>\n//               <img src=\"./Scissors.png\" alt=\"scissors-hand\" />\n//             </div>\n//             <div className=\"hand rock\" onClick={() => handlePlayerChoice('rock')}>\n//               <img src=\"./Rock.png\" alt=\"rock-hand\" />\n//             </div>\n//           </div>\n//           <div className=\"contest\">\n//             <div className=\"userhand\">\n//               <h4>{playerName}</h4>\n// {playerChoice && (\n// <img src={'./${playerChoice}.png'} alt={'${playerChoice}-hand'} />\n// )}\n// </div>\n// <div className=\"computerhand\">\n// <h4>{opponentName}</h4>\n// {opponentChoice && (\n// <img src={'./${opponentChoice}.png'} alt={'${opponentChoice}-hand'} />\n// )}\n// </div>\n// </div>\n// {gameStatus && (\n// <div>\n// <h2>{gameStatus}</h2>\n// <button onClick={handleRestartGame}>Restart Game</button>\n// </div>\n// )}\n// </div>\n// )}\n// </div>\n// );\n// }\n\n// export default Apptest;\n//  perfect\n// import React, { useState } from 'react';\n\n// const ROCK = 'rock';\n// const PAPER = 'paper';\n// const SCISSORS = 'scissors';\n\n// const Game = () => {\n//   const [player1Choice, setPlayer1Choice] = useState(null);\n//   const [player2Choice, setPlayer2Choice] = useState(null);\n//   const [winner, setWinner] = useState(null);\n\n//   const handlePlayer1Choice = (choice) => {\n//     setPlayer1Choice(choice);\n//     if (player2Choice !== null) {\n//       determineWinner(choice, player2Choice);\n//     }\n//   };\n\n//   const handlePlayer2Choice = (choice) => {\n//     setPlayer2Choice(choice);\n//     if (player1Choice !== null) {\n//       determineWinner(player1Choice, choice);\n//     }\n//   };\n\n//   const determineWinner = (player1Choice, player2Choice) => {\n//     if (player1Choice === player2Choice) {\n//       setWinner('Tie');\n//     } else if (\n//       (player1Choice === ROCK && player2Choice === SCISSORS) ||\n//       (player1Choice === PAPER && player2Choice === ROCK) ||\n//       (player1Choice === SCISSORS && player2Choice === PAPER)\n//     ) {\n//       setWinner('Player 1');\n//     } else {\n//       setWinner('Player 2');\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <h1>Rock Paper Scissors Game</h1>\n//       <p>{`Player 1's choice: ${player1Choice}`}</p>\n//       <p>{`Player 2's choice: ${player2Choice}`}</p>\n//       {winner ? (\n//         <p>{`Winner: ${winner}`}</p>\n//       ) : (\n//         <div>\n//           <button onClick={() => handlePlayer1Choice(ROCK)}>Rock</button>\n//           <button onClick={() => handlePlayer1Choice(PAPER)}>Paper</button>\n//           <button onClick={() => handlePlayer1Choice(SCISSORS)}>Scissors</button>\n//           <br />\n//           <br />\n//           <button onClick={() => handlePlayer2Choice(ROCK)}>Rock</button>\n//           <button onClick={() => handlePlayer2Choice(PAPER)}>Paper</button>\n//           <button onClick={() => handlePlayer2Choice(SCISSORS)}>Scissors</button>\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Game;\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ROCK = 'rock';\nconst PAPER = 'paper';\nconst SCISSORS = 'scissors';\nconst Game = () => {\n  _s();\n  const [player1Choice, setPlayer1Choice] = useState(null);\n  const [player2Choice, setPlayer2Choice] = useState(null);\n  const [winner, setWinner] = useState(null);\n  const [score, setScore] = useState({\n    player1: 0,\n    player2: 0\n  });\n  const handlePlayer1Choice = choice => {\n    setPlayer1Choice(choice);\n    if (player2Choice !== null) {\n      determineWinner(choice, player2Choice);\n    }\n  };\n  const handlePlayer2Choice = choice => {\n    setPlayer2Choice(choice);\n    if (player1Choice !== null) {\n      determineWinner(player1Choice, choice);\n    }\n  };\n  const determineWinner = (player1Choice, player2Choice) => {\n    if (player1Choice === player2Choice) {\n      setWinner('Tie');\n    } else if (player1Choice === ROCK && player2Choice === SCISSORS || player1Choice === PAPER && player2Choice === ROCK || player1Choice === SCISSORS && player2Choice === PAPER) {\n      setWinner('Player 1');\n      setScore({\n        ...score,\n        player1: score.player1 + 1\n      });\n    } else {\n      setWinner('Player 2');\n      setScore({\n        ...score,\n        player2: score.player2 + 1\n      });\n    }\n\n    // Reset player choices and winner state after a winner is determined\n    setTimeout(() => {\n      setPlayer1Choice(null);\n      setPlayer2Choice(null);\n      setWinner(null);\n    }, 2000);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Rock Paper Scissors Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: `Player 1's choice: ${player1Choice}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: `Player 2's choice: ${player2Choice}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }, this), winner ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: `Winner: ${winner}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: `Player 1 score: ${score.player1}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: `Player 2 score: ${score.player2}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePlayer1Choice(ROCK),\n        children: \"Rock\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePlayer1Choice(PAPER),\n        children: \"Paper\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePlayer1Choice(SCISSORS),\n        children: \"Scissors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePlayer2Choice(ROCK),\n        children: \"Rock\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePlayer2Choice(PAPER),\n        children: \"Paper\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handlePlayer2Choice(SCISSORS),\n        children: \"Scissors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 251,\n    columnNumber: 5\n  }, this);\n};\n_s(Game, \"Q88UFGaG+2B5n2NhwNWZiyC1jiA=\");\n_c = Game;\nexport default Game;\nvar _c;\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"names":["React","useState","ROCK","PAPER","SCISSORS","Game","player1Choice","setPlayer1Choice","player2Choice","setPlayer2Choice","winner","setWinner","score","setScore","player1","player2","handlePlayer1Choice","choice","determineWinner","handlePlayer2Choice","setTimeout"],"sources":["C:/Users/ayush/Downloads/Socket Demo App/Socket Demo App/client/my-app/src/test.js"],"sourcesContent":["// // App.js\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import io from 'socket.io-client';\r\n// import './App.css';\r\n\r\n// const socket = io(\"http://localhost:8001\");\r\n// function Apptest() {\r\n//   const [roomId, setRoomId] = useState('');\r\n//   const [playerName, setPlayerName] = useState('');\r\n//   const [opponentName, setOpponentName] = useState('');\r\n//   const [playerChoice, setPlayerChoice] = useState('');\r\n//   const [opponentChoice, setOpponentChoice] = useState('');\r\n//   const [gameStatus, setGameStatus] = useState('');\r\n\r\n//   useEffect(() => {\r\n//     socket.on('connect', () => {\r\n//       console.log('Connected to server!');\r\n//     });\r\n\r\n//     socket.on('joinedRoom', ({ playerName, opponentName }) => {\r\n//       console.log(`Player ${playerName} joined the room.`);\r\n//       setPlayerName(playerName);\r\n//       setOpponentName(opponentName);\r\n//     });\r\n\r\n//     socket.on('gameStarted', () => {\r\n//       console.log('Game started!');\r\n//     });\r\n\r\n//     socket.on('opponentChoice', ({ choice }) => {\r\n//       console.log(`Opponent chose ${choice}.`);\r\n//       setOpponentChoice(choice);\r\n//     });\r\n\r\n//     socket.on('gameResult', ({ result }) => {\r\n//       console.log(`Game result: ${result}.`);\r\n//       setGameStatus(result);\r\n//     });\r\n\r\n//     socket.on('gameRestart', () => {\r\n//       console.log('Game restarted!');\r\n//       setPlayerChoice('');\r\n//       setOpponentChoice('');\r\n//       setGameStatus('');\r\n//     });\r\n\r\n//     socket.on('disconnect', () => {\r\n//       console.log('Disconnected from server.');\r\n//     });\r\n\r\n//     return () => {\r\n//       socket.disconnect();\r\n//     };\r\n//   }, []);\r\n\r\n//   const handleJoinRoom = () => {\r\n//     if (roomId && playerName) {\r\n//       socket.emit('joinRoom', { roomId, playerName });\r\n//     }\r\n//   };\r\n\r\n//   const handlePlayerChoice = (choice) => {\r\n//     if (!playerChoice) {\r\n//       setPlayerChoice(choice);\r\n//       socket.emit('playerChoice', { choice });\r\n//     }\r\n//   };\r\n\r\n//   const handleRestartGame = () => {\r\n//     socket.emit('restartGame');\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"App\">\r\n//       {!playerName ? (\r\n//         <div>\r\n//           <input\r\n//             type=\"text\"\r\n//             placeholder=\"Enter your name\"\r\n//             value={playerName}\r\n//             onChange={(e) => setPlayerName(e.target.value)}\r\n//           />\r\n//           <input\r\n//             type=\"text\"\r\n//             placeholder=\"Enter room ID\"\r\n//             value={roomId}\r\n//             onChange={(e) => setRoomId(e.target.value)}\r\n//           />\r\n//           <button onClick={handleJoinRoom}>Join Room</button>\r\n//         </div>\r\n//       ) : (\r\n//         <div>\r\n//           <h1>Rock Paper Scissors</h1>\r\n//           <h2>Room: {roomId}</h2>\r\n//           <h3>{playerName} vs {opponentName}</h3>\r\n//           <div className=\"hands\">\r\n//             <div className=\"hand paper\" onClick={() => handlePlayerChoice('paper')}>\r\n//               <img src=\"./Paper.png\" alt=\"paper-hand\" />\r\n//             </div>\r\n//             <div className=\"hand scissors\" onClick={() => handlePlayerChoice('scissors')}>\r\n//               <img src=\"./Scissors.png\" alt=\"scissors-hand\" />\r\n//             </div>\r\n//             <div className=\"hand rock\" onClick={() => handlePlayerChoice('rock')}>\r\n//               <img src=\"./Rock.png\" alt=\"rock-hand\" />\r\n//             </div>\r\n//           </div>\r\n//           <div className=\"contest\">\r\n//             <div className=\"userhand\">\r\n//               <h4>{playerName}</h4>\r\n// {playerChoice && (\r\n// <img src={'./${playerChoice}.png'} alt={'${playerChoice}-hand'} />\r\n// )}\r\n// </div>\r\n// <div className=\"computerhand\">\r\n// <h4>{opponentName}</h4>\r\n// {opponentChoice && (\r\n// <img src={'./${opponentChoice}.png'} alt={'${opponentChoice}-hand'} />\r\n// )}\r\n// </div>\r\n// </div>\r\n// {gameStatus && (\r\n// <div>\r\n// <h2>{gameStatus}</h2>\r\n// <button onClick={handleRestartGame}>Restart Game</button>\r\n// </div>\r\n// )}\r\n// </div>\r\n// )}\r\n// </div>\r\n// );\r\n// }\r\n\r\n// export default Apptest;\r\n//  perfect\r\n// import React, { useState } from 'react';\r\n\r\n// const ROCK = 'rock';\r\n// const PAPER = 'paper';\r\n// const SCISSORS = 'scissors';\r\n\r\n// const Game = () => {\r\n//   const [player1Choice, setPlayer1Choice] = useState(null);\r\n//   const [player2Choice, setPlayer2Choice] = useState(null);\r\n//   const [winner, setWinner] = useState(null);\r\n\r\n//   const handlePlayer1Choice = (choice) => {\r\n//     setPlayer1Choice(choice);\r\n//     if (player2Choice !== null) {\r\n//       determineWinner(choice, player2Choice);\r\n//     }\r\n//   };\r\n\r\n//   const handlePlayer2Choice = (choice) => {\r\n//     setPlayer2Choice(choice);\r\n//     if (player1Choice !== null) {\r\n//       determineWinner(player1Choice, choice);\r\n//     }\r\n//   };\r\n\r\n//   const determineWinner = (player1Choice, player2Choice) => {\r\n//     if (player1Choice === player2Choice) {\r\n//       setWinner('Tie');\r\n//     } else if (\r\n//       (player1Choice === ROCK && player2Choice === SCISSORS) ||\r\n//       (player1Choice === PAPER && player2Choice === ROCK) ||\r\n//       (player1Choice === SCISSORS && player2Choice === PAPER)\r\n//     ) {\r\n//       setWinner('Player 1');\r\n//     } else {\r\n//       setWinner('Player 2');\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>Rock Paper Scissors Game</h1>\r\n//       <p>{`Player 1's choice: ${player1Choice}`}</p>\r\n//       <p>{`Player 2's choice: ${player2Choice}`}</p>\r\n//       {winner ? (\r\n//         <p>{`Winner: ${winner}`}</p>\r\n//       ) : (\r\n//         <div>\r\n//           <button onClick={() => handlePlayer1Choice(ROCK)}>Rock</button>\r\n//           <button onClick={() => handlePlayer1Choice(PAPER)}>Paper</button>\r\n//           <button onClick={() => handlePlayer1Choice(SCISSORS)}>Scissors</button>\r\n//           <br />\r\n//           <br />\r\n//           <button onClick={() => handlePlayer2Choice(ROCK)}>Rock</button>\r\n//           <button onClick={() => handlePlayer2Choice(PAPER)}>Paper</button>\r\n//           <button onClick={() => handlePlayer2Choice(SCISSORS)}>Scissors</button>\r\n//         </div>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Game;\r\n\r\n\r\nimport React, { useState } from 'react';\r\n\r\nconst ROCK = 'rock';\r\nconst PAPER = 'paper';\r\nconst SCISSORS = 'scissors';\r\n\r\nconst Game = () => {\r\n  const [player1Choice, setPlayer1Choice] = useState(null);\r\n  const [player2Choice, setPlayer2Choice] = useState(null);\r\n  const [winner, setWinner] = useState(null);\r\n  const [score, setScore] = useState({ player1: 0, player2: 0 });\r\n\r\n  const handlePlayer1Choice = (choice) => {\r\n    setPlayer1Choice(choice);\r\n    if (player2Choice !== null) {\r\n      determineWinner(choice, player2Choice);\r\n    }\r\n  };\r\n\r\n  const handlePlayer2Choice = (choice) => {\r\n    setPlayer2Choice(choice);\r\n    if (player1Choice !== null) {\r\n      determineWinner(player1Choice, choice);\r\n    }\r\n  };\r\n\r\n  const determineWinner = (player1Choice, player2Choice) => {\r\n    if (player1Choice === player2Choice) {\r\n      setWinner('Tie');\r\n    } else if (\r\n      (player1Choice === ROCK && player2Choice === SCISSORS) ||\r\n      (player1Choice === PAPER && player2Choice === ROCK) ||\r\n      (player1Choice === SCISSORS && player2Choice === PAPER)\r\n    ) {\r\n      setWinner('Player 1');\r\n      setScore({ ...score, player1: score.player1 + 1 });\r\n    } else {\r\n      setWinner('Player 2');\r\n      setScore({ ...score, player2: score.player2 + 1 });\r\n    }\r\n\r\n    // Reset player choices and winner state after a winner is determined\r\n    setTimeout(() => {\r\n      setPlayer1Choice(null);\r\n      setPlayer2Choice(null);\r\n      setWinner(null);\r\n    }, 2000);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Rock Paper Scissors Game</h1>\r\n      <p>{`Player 1's choice: ${player1Choice}`}</p>\r\n      <p>{`Player 2's choice: ${player2Choice}`}</p>\r\n      {winner ? (\r\n        <div>\r\n          <p>{`Winner: ${winner}`}</p>\r\n          <p>{`Player 1 score: ${score.player1}`}</p>\r\n          <p>{`Player 2 score: ${score.player2}`}</p>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <button onClick={() => handlePlayer1Choice(ROCK)}>Rock</button>\r\n          <button onClick={() => handlePlayer1Choice(PAPER)}>Paper</button>\r\n          <button onClick={() => handlePlayer1Choice(SCISSORS)}>Scissors</button>\r\n          <br />\r\n          <br />\r\n          <button onClick={() => handlePlayer2Choice(ROCK)}>Rock</button>\r\n          <button onClick={() => handlePlayer2Choice(PAPER)}>Paper</button>\r\n          <button onClick={() => handlePlayer2Choice(SCISSORS)}>Scissors</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n\r\n"],"mappings":";;AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC;AAExC,MAAMC,IAAI,GAAG,MAAM;AACnB,MAAMC,KAAK,GAAG,OAAO;AACrB,MAAMC,QAAQ,GAAG,UAAU;AAE3B,MAAMC,IAAI,GAAG,MAAM;EAAA;EACjB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACO,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACxD,MA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}