{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ayush\\\\Downloads\\\\Socket Demo App\\\\Socket Demo App\\\\client\\\\my-app\\\\src\\\\backup_App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\n// import io from \"socket.io-client\";\n// import { useEffect, useState } from \"react\";\n\n// // const socket = io.connect(\"http://localhost:3001\");\n// const MyComponent = () => {\n//   const [connected, setConnected] = useState(false);\n//   const [socket, setSocket] = useState(null);\n\n//   useEffect(() => {\n//     // Connect to the Socket.IO server\n//     const newSocket = io('http://localhost:3001');\n\n//     // Set the socket and the connection status\n//     setSocket(newSocket);\n//     setConnected(newSocket.connected);\n\n//     // Disconnect the socket when the component unmounts\n//     return () => {\n//       newSocket.disconnect();\n//       setSocket(null);\n//       setConnected(false);\n//     };\n//   }, []);\n\n//   return (\n//     <div>\n//       {connected ? (\n//         <p>Socket connection is established</p>\n//       ) : (\n//         <p>Socket connection is not established</p>\n//       )}\n//     </div>\n//   );\n// };\n// const socket = io.connect(\"http://localhost:8001\");\n\n// function App() {\n\n//   //Room State\n//   const [room, setRoom] = useState(\"\");\n\n//   // Messages States\n//   const [message, setMessage] = useState(\"\");\n//   const [messageReceived, setMessageReceived] = useState(\"\");\n\n//   const joinRoom = () => {\n//     if (room !== \"\") {\n//       socket.emit(\"join_room\", room);\n//     }\n//   };\n//   console.log(\"r\", room, message);\n//   let stored = localStorage.getItem(\"room\");\n\n//   var flag = {\n//     room: room,\n//     message: message,\n//   };\n\n//   var arr = [];\n//   arr.push(stored, flag);\n\n//   const sendMessage = () => {\n//     let msgObj = {\n//       message: message,\n//       room: room,\n//       send: true,\n//     };\n//     socket.emit(\"send_message\", { msgObj, room });\n//     localStorage.setItem(\"room\",JSON.stringify(arr))\n//   };\n\n//   useEffect(() => {\n//     alert(\"uppr\")\n//     socket.on(\"testsocket\", (data) => {\n//       console.log(data);\n//       alert(\"niche\")\n//       setMessageReceived(data.msgObj.message);\n//       console.log(\"data\", data);\n//       let msgObj = {\n//         message: data.msgObj.message,\n//         room: data.msgObj.room,\n//         receive: true,\n//       };\n//       console.log(\"received data\", msgObj);\n//     });\n//   }, [socket]);\n\n//   return (\n//     <>\n//       <div className=\"App\">\n//         <input\n//           placeholder=\"Room Number...\"\n//           onChange={(event) => {\n//             setRoom(event.target.value);\n//           }}\n//         />\n//         <button onClick={joinRoom}>Join Room</button>\n//         <input\n//           placeholder=\"Message...\"\n//           onChange={(event) => {\n//             setMessage(event.target.value);\n//           }}\n//         />\n//         <button onClick={sendMessage}>Send Message</button>\n//         <h1> Message:</h1>\n\n//         <div id=\"message\">\n//           <p id=\"history\">\n//             \"room\" : {room}\n//             <br />\n//             \"message\" :{messageReceived}\n//           </p>\n//         </div>\n//       </div>\n//     </>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [socket, setSocket] = useState(null);\n  const [room, setRoom] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [messageReceived, setMessageReceived] = useState(\"\");\n  useEffect(() => {\n    const newSocket = io(\"http://localhost:8001\");\n    setSocket(newSocket);\n    return () => {\n      newSocket.disconnect();\n    };\n  }, []);\n  useEffect(() => {\n    if (!socket) return;\n    socket.on(\"connect\", () => {\n      console.log(\"Connected to server\");\n    });\n    socket.on(\"disconnect\", () => {\n      console.log(\"Disconnected from server\");\n    });\n    socket.on(\"testsocket\", data => {\n      console.log(\"Received data:\", data);\n      setMessageReceived(data.msgObj.message);\n    });\n    return () => {\n      socket.off(\"connect\");\n      socket.off(\"disconnect\");\n      socket.off(\"testsocket\");\n    };\n  }, [socket]);\n  const joinRoom = () => {\n    if (room !== \"\") {\n      socket.emit(\"join_room\", room);\n    }\n  };\n  const sendMessage = () => {\n    if (message === \"\") return;\n    const msgObj = {\n      message: message,\n      room: room,\n      send: true\n    };\n    socket.emit(\"send_message\", {\n      msgObj,\n      room\n    });\n    const stored = localStorage.getItem(\"room\");\n    console.log(\"hii\", stored);\n    const flag = {\n      room: room,\n      message: message\n    };\n    let arr = stored ? JSON.parse(stored) : [];\n    arr.push(flag);\n    localStorage.setItem(\"room\", JSON.stringify(arr));\n    setMessage(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Room Number...\",\n      value: room,\n      onChange: event => {\n        setRoom(event.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: joinRoom,\n      children: \"Join Room\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      placeholder: \"Message...\",\n      value: message,\n      onChange: event => {\n        setMessage(event.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: sendMessage,\n      children: \"Send Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Message:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"message\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          color: \"red\"\n        },\n        children: [\"Room: \", room, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this), \"Message: \", messageReceived]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"GtqIB04B8ntX+/cLMvWzIjnuybg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","io","App","socket","setSocket","room","setRoom","message","setMessage","messageReceived","setMessageReceived","newSocket","disconnect","on","console","log","data","msgObj","off","joinRoom","emit","sendMessage","send","stored","localStorage","getItem","flag","arr","JSON","parse","push","setItem","stringify","event","target","value","color"],"sources":["C:/Users/ayush/Downloads/Socket Demo App/Socket Demo App/client/my-app/src/backup_App.js"],"sourcesContent":["import \"./App.css\";\n// import io from \"socket.io-client\";\n// import { useEffect, useState } from \"react\";\n\n// // const socket = io.connect(\"http://localhost:3001\");\n// const MyComponent = () => {\n//   const [connected, setConnected] = useState(false);\n//   const [socket, setSocket] = useState(null);\n\n//   useEffect(() => {\n//     // Connect to the Socket.IO server\n//     const newSocket = io('http://localhost:3001');\n\n//     // Set the socket and the connection status\n//     setSocket(newSocket);\n//     setConnected(newSocket.connected);\n\n//     // Disconnect the socket when the component unmounts\n//     return () => {\n//       newSocket.disconnect();\n//       setSocket(null);\n//       setConnected(false);\n//     };\n//   }, []);\n\n//   return (\n//     <div>\n//       {connected ? (\n//         <p>Socket connection is established</p>\n//       ) : (\n//         <p>Socket connection is not established</p>\n//       )}\n//     </div>\n//   );\n// };\n// const socket = io.connect(\"http://localhost:8001\");\n\n// function App() {\n\n\n\n//   //Room State\n//   const [room, setRoom] = useState(\"\");\n\n//   // Messages States\n//   const [message, setMessage] = useState(\"\");\n//   const [messageReceived, setMessageReceived] = useState(\"\");\n\n//   const joinRoom = () => {\n//     if (room !== \"\") {\n//       socket.emit(\"join_room\", room);\n//     }\n//   };\n//   console.log(\"r\", room, message);\n//   let stored = localStorage.getItem(\"room\");\n\n//   var flag = {\n//     room: room,\n//     message: message,\n//   };\n\n//   var arr = [];\n//   arr.push(stored, flag);\n\n//   const sendMessage = () => {\n//     let msgObj = {\n//       message: message,\n//       room: room,\n//       send: true,\n//     };\n//     socket.emit(\"send_message\", { msgObj, room });\n//     localStorage.setItem(\"room\",JSON.stringify(arr))\n//   };\n\n//   useEffect(() => {\n//     alert(\"uppr\")\n//     socket.on(\"testsocket\", (data) => {\n//       console.log(data);\n//       alert(\"niche\")\n//       setMessageReceived(data.msgObj.message);\n//       console.log(\"data\", data);\n//       let msgObj = {\n//         message: data.msgObj.message,\n//         room: data.msgObj.room,\n//         receive: true,\n//       };\n//       console.log(\"received data\", msgObj);\n//     });\n//   }, [socket]);\n\n//   return (\n//     <>\n//       <div className=\"App\">\n//         <input\n//           placeholder=\"Room Number...\"\n//           onChange={(event) => {\n//             setRoom(event.target.value);\n//           }}\n//         />\n//         <button onClick={joinRoom}>Join Room</button>\n//         <input\n//           placeholder=\"Message...\"\n//           onChange={(event) => {\n//             setMessage(event.target.value);\n//           }}\n//         />\n//         <button onClick={sendMessage}>Send Message</button>\n//         <h1> Message:</h1>\n\n//         <div id=\"message\">\n//           <p id=\"history\">\n//             \"room\" : {room}\n//             <br />\n//             \"message\" :{messageReceived}\n//           </p>\n//         </div>\n//       </div>\n//     </>\n//   );\n// }\n\n// export default App;\n\nimport React, { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\n\nfunction App() {\n  const [socket, setSocket] = useState(null);\n  const [room, setRoom] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n  const [messageReceived, setMessageReceived] = useState(\"\");\n\n  useEffect(() => {\n    const newSocket = io(\"http://localhost:8001\");\n\n    setSocket(newSocket);\n\n    return () => {\n      newSocket.disconnect();\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!socket) return;\n\n    socket.on(\"connect\", () => {\n      console.log(\"Connected to server\");\n    });\n\n    socket.on(\"disconnect\", () => {\n      console.log(\"Disconnected from server\");\n    });\n\n    socket.on(\"testsocket\", (data) => {\n      console.log(\"Received data:\", data);\n\n      setMessageReceived(data.msgObj.message);\n    });\n\n    return () => {\n      socket.off(\"connect\");\n      socket.off(\"disconnect\");\n      socket.off(\"testsocket\");\n    };\n  }, [socket]);\n\n  const joinRoom = () => {\n    if (room !== \"\") {\n      socket.emit(\"join_room\", room);\n    }\n  };\n\n  const sendMessage = () => {\n    if (message === \"\") return;\n\n    const msgObj = {\n      message: message,\n      room: room,\n      send: true,\n    };\n\n    socket.emit(\"send_message\", { msgObj, room });\n\n    const stored = localStorage.getItem(\"room\");\n    console.log(\"hii\",stored);\n    const flag = {\n      room: room,\n      message: message,\n    };\n\n    let arr = stored ? JSON.parse(stored) : [];\n\n    arr.push(flag);\n\n    localStorage.setItem(\"room\", JSON.stringify(arr));\n\n    setMessage(\"\");\n  };\n\n  return (\n    <div className=\"App\">\n      <input\n        placeholder=\"Room Number...\"\n        value={room}\n        onChange={(event) => {\n          setRoom(event.target.value);\n        }}\n      />\n      <button onClick={joinRoom}>Join Room</button>\n      <input\n        placeholder=\"Message...\"\n        value={message}\n        onChange={(event) => {\n          setMessage(event.target.value);\n        }}\n      />\n      <button onClick={sendMessage}>Send Message</button>\n      <h1>Message:</h1>\n      <div id=\"message\">\n        <p style={{color:\"red\"}}>   \n          Room: {room}\n          <br />\n          Message: {messageReceived}\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}